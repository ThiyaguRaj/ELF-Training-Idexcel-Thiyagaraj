DATA:
	A Data is a Raw fact which defines the attribute of an entity.

DATABASE:
	A Database is the place where we can store data in an organized and systematic approach.

APPLICATION:
	1. It is an Interface between user and operating system.
	2. Every Application has its own dedicated functionallity.
	3. Every Application has its own File Extension.
	4. It is Platform dependant.

DBMS:
	1. DBMS stands for Database management System.
	2. The DBMS manages incoming data, organizes it, and provides ways for the data to be modified or extracted by users or other programs.
	3. Some DBMS examples include MySQL, PostgreSQL, Microsoft Access, SQL Server, FileMaker, Oracle.

TYPES OF DBMS:
	1. Hierarchical DBMS
	2. Network DBMS
	3. Relational DBMS
	4. Object DBMS-(Data Stored in the form of Objects)

RELATIONAL DBMS:
	1. A DBMS which organises and store the data by following relational model is known as RDBMS.
	2. Similarly, The DBMS which follow the E.F.CODD rule is known as RDBMS.
	3. In RDBMS, the data sholuld be stored in the form of tables.

TABLES:
	It is the logical representation of data which consists of row and column.

COLUMN:
	It is used to represent all the properties of the entities.

ROW:
	It is also called as Record/Tuples and it is used to represent all the properties of individual entities.

CELL:
	It is the smallest unit of table, which is used to store the data.


CONSTRAINTS:
	1. Constraints are used to enforce some rules on columns of the table.
	2. It is used to limit the type of data that can go into the table.
	3. This ensures the accuracy of data in the table.
	
	NOT NULL:
		It ensures that it should have some value or in the other word this constraint is used to specify that the data is mandatory.
	UNIQUE:
		It is used to avoid duplicacy of values into the column.
	CHECK:
		It is an extra validation given to a column with a condition.
	PRIMARY KEY:
		1. It is the combination of unique and notnull.
		2. It is used to identify a record uniquely.
		3. In a table, we can have only one primary key.
		4. It is  not mandatory to have a primary key in a table. But, it is highly recommended.
	FOREIGN KEY:
		1. It is used to establish the relationship between two tables.
		2. We can have more than one foreign key in a table and it can be duplicate and null.
		3. Foreign key is a key in the child table which is the primary key of its parent table.

		CHARACTERISTICS:
			1. A table in which foreign key is present is known as child table.
			2. A table in which it actually belongs is known as parent table.
			3. Foreign Key must and should declare as primary key in the parent table.
			4. We cannot insert a value in a column defined as a foreign key, which is not present in the table.
			5. So, Foreign key is also called as referential integrity.

DATA TYPES:
	1. Numeric
	2. Date and Time
	3. String Data types

E.F.CODD Rules:

1. The data entered into the cell should be single valued or atomic data.
2. We can store the data in multiple tables, if needed we can establish connection between two tables by using key attributes.
3. Data stored in the tables can be validated in two steps
	 i] By assigning Datatypes
	ii] By assigning Constraints
4. Everything in the database should be stored in table fortmat.
5. A database can only be addressed using a language having linear syntax that supports data definition, data manipulation and data transaction management operations.
6. The data stored in the database must be independent of applications that access the database.
7. All viwes that are theorytically updatable are also updatable by the system.
8. The capability of handling a base or derived relation as a single operand applies not only to the retrieval, but also to insertion, update and deletion of data.
9. All information in the database is represented explicitely at logical level and in exactly one way.
10. Each and every data in database should be accessible by combination of table name, primary key value and column name.
11. Null values are supported in for representing Missing data, inapplicablr information and independent of data.
12. The end user must not able to see that the data is distributed over various locations.

SQL:
	1. SQL stands for Structured Query Language.
	2. SQL is a language used to interact with the database.
	3. According to ANSI (American National Standards Institute), it is the standard language for relational database management systems.
	
	SQL HISTORY:
		1. IBM was the first company to develop DBMS which follow Relational model and is also called as System R.
		2. IBM developed a language to communicate with system R which is known as SEQUEL.
		3. SEQUEL stands for Simple English Query Language.
		4. Then, ANSI (American National Standards Institute) took SEQUEL and made some modifications and recommend it as SQL.
		5. SQL is the standard language for all the RDBMS Applications.
		6. SQL commands are case insesnsitive.

ORDBMS:

	An ORDBMS is a relational DBMS that allows developer to integrate the database with their own datatypes and method.

		a] ORDBMS -> RDBMS + ODBMS
		b] In ORDBMS, we can have our own datatypes.

	POSTGRES (or) POSTGRESQL:
		a] It is an open source object oriented Database.
		b] It is the worlds most advanced open source RDBMS.
SQL COMMANDS:
	1] Data Definition Language(DDL)
		a] It deals with database or table structure.
		b] It helps us to define the structure.
		DDL Commands are,
			a] Create
			b] Alter
			c] Drop
			d] Rename
			e] Truncate
	2] Data Manipulation Language(DML)
		a] It deals with data in the database.
		DML Commands are,
			a] Insert
			b] Update
			c] Delete
	3] Data Control Language(DCL)
		a] Grant
		b] Revoke
	4] Transaction Control Language(TCL)
		a] Commit

DDL:
	Create:
			Syntax --> create database database_name;
			Example --> Create database test;
	Alter:
			Syntax --> Alter table table_name add column column_name datatype;
			Example --> Alter table person add column age int;
	Drop:
			Syntax --> Drop table table_name;
			Example --> Drop table person;
	Rename:
			Syntax --> Alter table table_name rename to t_name;
			Example --> Alter table person rename to emp;

DML:
	Insert:
			Syntax --> Insert into table_name values(value1,......value_n);
			Example --> Insert into person values(1,'Tyagu');

	Update:

			Update values:
				Syntax --> Update tablename set colname=value;
				Ex -->  Update emp set sal=999.99;

			Update whith condition: 
				Syntax --> Update tablename set columnname=value where condion;
				Ex --> update emp set sal=999.9 where id=7;

	Delete:
	
			Delete all values - detete from idexcel_db;
			Delete with condition - delete from emp where id=8;

DQL:

	Select Clause:
			There are three different ways to retrive data from the table.

		1. Projection:
			Selecting a column.
		2. Selection:
			Slecting both rows and columns.
		3. Join:
			Retrieving data from multiple tables at same time.

			Syntax --> select */Distinct column_name/Expression/alias from table_name;
			Example --> select * from student;

			* --> Helps us to retrieve all the data present in the table.
			Order of Execution --> From - Select.

		Selection:
			Syntax --> select * from table_name;
			Example --> select * from student;

		Projection:

			Syntax --> select column_name from table_name;
			Example --> select name from student;

	Where Clause:
		Where clause is used to apply some condition.

			Syntax --> Select */Column_name from table_name where condition;
			Example --> Select * from emp where id=10;
	
Expressions:
	1. It is a statement, Which gives some result.
	2. It consists of operators and operands.

DISTINCT:
	1. Used to remove duplicate rows from a table
		a. if, we are passing single argument with distinct, it will remove duplicate values.
		b. if, we use two column name with distinct keyword, the it will remove duplicates with combination of columns

	Syntax --> Select distinct col_name from table_name;
	Example --> Select distinct ename from employee;

COMPARISION OPERATORS:

	The following are the comparision operators in sql
		( =,<,>,>=,<=,!=,<> )

	Example:
		select * from employee where deptno=10;
LOGICAL OPERATOR:

	
	( AND,OR,NOT )

	AND:
		1. Whenever we want to satisfy multiple conditions we can use AND operator.
		2. It will return true only if both the conditions return true.
		3. If one of the them returns false the end result will be false.

		Syntax --> select * from table_name where condition1 and condition2;
		Example --> select * from employee where designation='hr' and deptno=20 and sal>24999;

	OR:
		1. It will return true if any of the condition returns true.
		2. It wil return false if every condition returns false.

		Syntax --> select * from table_name where condition1 or condition2;
		Ex --> select * from employee where deptno=10 or deptno=20;
	NOT:
		1. It is used to negate the condition.

		Syntax --> select * from t_name where not condition;
		Example --> select * from employee where not deptno=30;

	Order Of Execution:
		NOT, AND, OR

SPECIAL OPERATORS:

1. IN:
	* The IN operator allows you to specify multiple values in a WHERE clause.
	* The IN operator is a shorthand for multiple OR conditions.

	Syntax --> select * from t_name where column_name in(val1,val2,...valn);
	Example --> select * from employee where deptno in(10,30,40,50);

2. NOT IN:
	* The NOT IN operator is used when you want to retrieve a column that has no entries in the table or referencing table.

	Syntax --> select * from t_name where column_name in(val1,val2,...valn);
	Example --> select * from employee where deptno in(50,30,40) and designation not in('salesman',hr');

3. BETWEEN:
	
	* The BETWEEN operator selects values within a given range.
	* Begin and end values should be included.

	Syntax --> select * from t_name where column_name between val1 and val2;
	Example --> select * from employee where sal between 20000 and 40000;

4. NOT BETWEEN:
	* The SQL NOT BETWEEN operator is used for getting the values as part of result set which is outside of the range specified by the BETWEEN operator.

	Syntax --> select * from t_name where column_name not between val1 and val2;
	Example --> select * from employee where sal between '2019-01-01' and '2019-12-31';

5. IS:
	* IS operator is used to check whether a value is NULL.
	* NULL means no value or missing value.
	* The IS NULL returns TRUE if the expression is NULL , otherwise it returns FALSE.

	Syntax --> select * from t_name where column_name is null;
	Example --> select * from employee where sal is null;

6. IS NOT:
	* IS NOT operator is used to check whether a value is NOT NULL.
	* The IS NOT NULL returns TRUE if the expression is NOT NULL , otherwise it returns FALSE.

	Syntax --> select * from t_name where column_name is not null;
	Example --> select * from employee where sal is not null;

CHARACTERS:
	Characters are divided into two types.
		1. Ordinary Characters
		2. Special Characters
	ORDINARY CHARACTERS:
		1. Which is the combination of alphabets and numbers.
		2. Which dont have any special functions.
	SPECIAL CHARACTERS:
		1. % and _ are the special characters used to make a pattern.
		2. we can use like and not like operators to match the pattern.


7. LIKE:
	* It determines if a character string matches a specified pattern.

	Syntax --> select * from t_name where col_name like '%_';
	Example --> select * from employee where ename like 'r%';

8. NOT LIKE:
	* It is used to exclude those rows which are matching the pattern followed by LIKE operator.

	Syntax --> select * from t_name where col_name not like '%_';
	Example --> select * from employee where ename not like 'z%' or ename not like 'p%';

FUNCTIONS:
	* Functions is a block of code used to perform a specific task.
	* Divided into two types
		a. Scalar Functions(single row functions)
		b. Aggregate Functions(Multi row functions)

Aggregate Functions:
		-> It takes 'n' number of input and provides only one output.
		-> Functions are
			1. Avg()
			2. Count()
			3. Max()
			4. Min()
			5. Sum()

1. AVG():
	
	Syntax-> select avg(col_name) from tablename;
	Example -> select avg(sal) from employee;

2. COUNT():
	Syntax -> select count(*) from t_name;	
	Example -> select count(*) from employee;

3. MAX():
	Syntax -> select max(c_name) from t_name;
	Ex -> select max(sal) from employee;

4. MIN():
	Syntax -> select min(c_name) from t_name;
	Ex -> select min(sal) from employee;

5. SUM():
	Syntax -> select sum(c_name) from t_name;
	Ex -> select sum(sal) from employee;


Scalar Functions:
		-> It takes 'n' number of inputs and provides 'n' number of outputs.
		-> It gives output per input.
		-> Functions are

			