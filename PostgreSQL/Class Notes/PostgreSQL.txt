
DATA:
	A Data is a Raw fact which defines the attribute of an entity.

DATABASE:
	A Database is the place where we can store data in an organized and systematic approach.

APPLICATION:
	1. It is an Interface between user and operating system.
	2. Every Application has its own dedicated functionallity.
	3. Every Application has its own File Extension.
	4. It is Platform dependant.

DBMS:
	1. DBMS stands for Database management System.
	2. The DBMS manages incoming data, organizes it, and provides ways for the data to be modified or extracted by users or othe r programs.
	3. Some DBMS examples include MySQL, PostgreSQL, Microsoft Access, SQL Server, FileMaker, Oracle.

TYPES OF DBMS:
	1. Hierarchical DBMS
	2. Network DBMS
	3. Relational DBMS
	4. Object DBMS-(Data Stored in the form of Objects)

RELATIONAL DBMS:
	1. A DBMS which organises and store the data by following relational model is known as RDBMS.
	2. Similarly, The DBMS which follow the E.F.CODD rule is known as RDBMS.
	3. In RDBMS, the data sholuld be stored in the form of tables.

TABLES:
	It is the logical representation of data which consists of row and column.

COLUMN:
	It is used to represent all the properties of the entities.

ROW:
	It is also called as Record/Tuples and it is used to represent all the properties of individual entities.

CELL:
	It is the smallest unit of table, which is used to store the data.


CONSTRAINTS:
	1. Constraints are used to enforce some rules on columns of the table.
	2. It is used to limit the type of data that can go into the table.
	3. This ensures the accuracy of data in the table.
	
	NOT NULL:
		It ensures that it should have some value or in the other word this constraint is used to specify that the data is mandatory.
	UNIQUE:
		It is used to avoid duplicacy of values into the column.
	CHECK:
		It is an extra validation given to a column with a condition.
	PRIMARY KEY:
		1. It is the combination of unique and notnull.
		2. It is used to identify a record uniquely.
		3. In a table, we can have only one primary key.
		4. It is  not mandatory to have a primary key in a table. But, it is highly recommended.
	FOREIGN KEY:
		1. It is used to establish the relationship between two tables.
		2. We can have more than one foreign key in a table and it can be duplicate and null.
		3. Foreign key is a key in the child table which is the primary key of its parent table.

		CHARACTERISTICS:
			1. A table in which foreign key is present is known as child table.
			2. A table in which it actually belongs is known as parent table.
			3. Foreign Key must and should declare as primary key in the parent table.
			4. We cannot insert a value in a column defined as a foreign key, which is not present in the table.
			5. So, Foreign key is also called as referential integrity.

DATA TYPES:
	1. Numeric
	2. Date and Time
	3. String Data types

E.F.CODD Rules:

1. The data entered into the cell should be single valued or atomic data.
2. We can store the data in multiple tables, if needed we can establish connection between two tables by using key attributes.
3. Data stored in the tables can be validated in two steps
	 i] By assigning Datatypes
	ii] By assigning Constraints
4. Everything in the database should be stored in table fortmat.
5. A database can only be addressed using a language having linear syntax that supports data definition, data manipulation and data transaction management operations.
6. The data stored in the database must be independent of applications that access the database.
7. All viwes that are theorytically updatable are also updatable by the system.
8. The capability of handling a base or derived relation as a single operand applies not only to the retrieval, but also to insertion, update and deletion of data.
9. All information in the database is represented explicitely at logical level and in exactly one way.
10. Each and every data in database should be accessible by combination of table name, primary key value and column name.
11. Null values are supported in for representing Missing data, inapplicablr information and independent of data.
12. The end user must not able to see that the data is distributed over various locations.

SQL:
	1. SQL stands for Structured Query Language.
	2. SQL is a language used to interact with the database.
	3. According to ANSI (American National Standards Institute), it is the standard language for relational database management systems.
	
	SQL HISTORY:
		1. IBM was the first company to develop DBMS which follow Relational model and is also called as System R.
		2. IBM developed a language to communicate with system R which is known as SEQUEL.
		3. SEQUEL stands for Simple English Query Language.
		4. Then, ANSI (American National Standards Institute) took SEQUEL and made some modifications and recommend it as SQL.
		5. SQL is the standard language for all the RDBMS Applications.
		6. SQL commands are case insesnsitive.

ORDBMS:

	An ORDBMS is a relational DBMS that allows developer to integrate the database with their own datatypes and method.

		a] ORDBMS -> RDBMS + ODBMS
		b] In ORDBMS, we can have our own datatypes.


	POSTGRES (or) POSTGRESQL:
		a] It is an open source object oriented Database.
		b] It is the worlds most advanced open source RDBMS.
SQL COMMANDS:
	1] Data Definition Language(DDL)
		a] It deals with database or table structure.
		b] It helps us to define the structure.
		DDL Commands are,
			a] Create
			b] Alter
			c] Drop
			d] Rename
			e] Truncate
	2] Data Manipulation Language(DML)
		a] It deals with data in the database.
		DML Commands are,
			a] Insert
			b] Update
			c] Delete
	3] Data Control Language(DCL)
		a] Grant
		b] Revoke
	4] Transaction Control Language(TCL)
		a] Commit

DDL:
	Create:
			Syntax --> create database database_name;
			Example --> Create database test;
	Alter:
			Syntax --> Alter table table_name add column column_name datatype;
			Example --> Alter table person add column age int;
	Drop:
			Syntax --> Drop table table_name;
			Example --> Drop table person;
	Rename:
			Syntax --> Alter table table_name rename to t_name;
			Example --> Alter table person rename to emp;

DML:
	Insert:
			Syntax --> Insert into table_name values(value1,......value_n);
			Example --> Insert into person values(1,'Tyagu');

	Update:

			Update values:
				Syntax --> Update tablename set colname=value;
				Ex -->  Update emp set sal=999.99;

			Update whith condition: 
				Syntax --> Update tablename set columnname=value where condion;
				Ex --> update emp set sal=999.9 where id=7;

	Delete:
	
			Delete all values - detete from idexcel_db;
			Delete with condition - delete from emp where id=8;

DQL:

	Select Clause:

		Syntax --> select */Distinct column_name/Expression/alias from table_name;
		Example --> select * from student;

			There are three different ways to retrive data from the table.

		1. Selection:
			Slecting both rows and columns.
		2. Projection:
			Selecting a column.
		3. Join:
			Retrieving data from multiple tables at same time.


			* --> Helps us to retrieve all the data present in the table.
			Order of Execution --> From - Select.

		Selection:
			Syntax --> select * from table_name;
			Example --> select * from student;

		Projection:

			Syntax --> select column_name from table_name;
			Example --> select name from student;

	Where Clause:
		Where clause is used to apply some condition.

			Syntax --> Select */Column_name from table_name where condition;
			Example --> Select * from emp where id=10;
	
TCL:

	-> It is a unit of work that performed against a data base.
	-> Transaction control commands are always used with DML commands ( Insert, Update, Delete).
	
	TCL COMMANDS:
		1. rollback
		2. commit
		3. savepoint

	RollBack:
		step 1:
			begin;
		step 2:
			DML Operation
		step 3:
			rollback;
		step 4:
			commit;

		-> We connot rollback already commited transactions.

	ACID properties:
	1. Atomicity
	2. Consistency
	3. Isolation
	4. Durability
	
	SAVEPOINT:
		-> making a mark upto to which we can rollback.
	
		Syntax -> Savepoint savepoint_name;
		Example -> Savepoint test;
		
	     Savepoint with rollback:
		
		Syntax -> rollback to savepoint savepoint_name;
		Example -> rollback to savepoint test;

	

Expressions:
	1. It is a statement, Which gives some result.
	2. It consists of operators and operands.

DISTINCT:
	1. Used to remove duplicate rows from a table
		a. if, we are passing single argument with distinct, it will remove duplicate values.
		b. if, we use two column name with distinct keyword, then it will remove duplicates with combination of columns

	Syntax --> Select distinct col_name from table_name;
	Example --> Select distinct ename from employee;

COMPARISION OPERATORS:

	The following are the comparision operators in sql
		( =,<,>,>=,<=,!=,<> )

	Example:
		select * from employee where deptno=10;
LOGICAL OPERATOR:

	
	( AND,OR,NOT )

	AND:
		1. Whenever we want to satisfy multiple conditions we can use AND operator.
		2. It will return true only if both the conditions return true.
		3. If one of the them returns false the end result will be false.

		Syntax --> select * from table_name where condition1 and condition2;
		Example --> select * from employee where designation='hr' and deptno=20 and sal>24999;

	OR:
		1. It will return true if any of the condition returns true.
		2. It wil return false if every condition returns false.

		Syntax --> select * from table_name where condition1 or condition2;
		Ex --> select * from employee where deptno=10 or deptno=20;
	NOT:
		1. It is used to negate the condition.

		Syntax --> select * from t_name where not condition;
		Example --> select * from employee where not deptno=30;

	Order Of Execution:
		NOT, AND, OR

SPECIAL OPERATORS:

1. IN:
	* The IN operator allows you to specify multiple values in a WHERE clause.
	* The IN operator is a shorthand for multiple OR conditions.

	Syntax --> select * from t_name where column_name in(val1,val2,...valn);
	Example --> select * from employee where deptno in(10,30,40,50);

2. NOT IN:
	* The NOT IN operator is used when you want to retrieve a column that has no entries in the table or referencing table.

	Syntax --> select * from t_name where column_name in(val1,val2,...valn);
	Example --> select * from employee where deptno in(50,30,40) and designation not in('salesman',hr');

3. BETWEEN:
	
	* The BETWEEN operator selects values within a given range.
	* Begin and end values should be included.

	Syntax --> select * from t_name where column_name between val1 and val2;
	Example --> select * from employee where sal between 20000 and 40000;

4. NOT BETWEEN:
	* The SQL NOT BETWEEN operator is used for getting the values as part of result set which is outside of the range specified by the BETWEEN operator.

	Syntax --> select * from t_name where column_name not between val1 and val2;
	Example --> select * from employee where sal between '2019-01-01' and '2019-12-31';

5. IS:
	* IS operator is used to check whether a value is NULL.
	* NULL means no value or missing value.
	* The IS NULL returns TRUE if the expression is NULL , otherwise it returns FALSE.

	Syntax --> select * from t_name where column_name is null;
	Example --> select * from employee where sal is null;

6. IS NOT:
	* IS NOT operator is used to check whether a value is NOT NULL.
	* The IS NOT NULL returns TRUE if the expression is NOT NULL , otherwise it returns FALSE.

	Syntax --> select * from t_name where column_name is not null;
	Example --> select * from employee where sal is not null;

CHARACTERS:
	Characters are divided into two types.
		1. Ordinary Characters
		2. Special Characters
	ORDINARY CHARACTERS:
		1. Which is the combination of alphabets and numbers.
		2. Which dont have any special functions.
	SPECIAL CHARACTERS:
		1. % and _ are the special characters used to make a pattern.
		2. we can use like and not like operators to match the pattern.


7. LIKE:
	* It determines if a character string matches a specified pattern.

	Syntax --> select * from t_name where col_name like '%_';
	Example --> select * from employee where ename like 'r%';

8. NOT LIKE:
	* It is used to exclude those rows which are matching the pattern followed by LIKE operator.

	Syntax --> select * from t_name where col_name not like '%_';
	Example --> select * from employee where ename not like 'z%' or ename not like 'p%';

FUNCTIONS:
	* Functions is a block of code used to perform a specific task.
	* Divided into two types
		a. Aggregate Functions(Multi row functions)
		b. Scalar Functions(single row functions)

Aggregate Functions(Multi row functions):
		-> It takes 'n' number of input and provides only one output.
		-> Functions are
			1. Avg()
			2. Count()
			3. Max()
			4. Min()
			5. Sum()

1. AVG():
	
	Syntax-> select avg(col_name) from tablename;
	Example -> select avg(sal) from employee;

2. COUNT():
	Syntax -> select count(*) from t_name;	
	Example -> select count(*) from employee;

3. MAX():
	Syntax -> select max(c_name) from t_name;
	Ex -> select max(sal) from employee;

4. MIN():
	Syntax -> select min(c_name) from t_name;
	Ex -> select min(sal) from employee;

5. SUM():
	Syntax -> select sum(c_name) from t_name;
	Ex -> select sum(sal) from employee;

Scalar Functions:
	-> It takes 'n' number of inputs and provides 'n' number of outputs.
	-> It gives output per input.

	1. CHARACTER SINGLE ROW FUNCTION:
		 i) Case
			1. Upper() -> Convert lower case to upper case
				eg - select upper(ename) from employee;
			2. Lower() -> Convert upper case to lower case
				eg - select lower(ename) from employee;
			3. initcap() -> conerts first letter to upper case and every other words to lower case.
				eg - select initcap(ename) from employee;
		ii) Character
			1. length()
				Syntax - select length(c_name) from t_name;
				eg - select length(ename) from employee;
			2. concat()
				Syntax - select concat(c_name1,c_name2) from t_name;
				eg - select concat(ename,' + ',mgr) from employee;
			3. reverse()
				Syntax - select reverse(c_name) from t_name;
				eg - select reverse(ename) from employee; 
			4. replace()
				Syntax - select replace('string','char1','char2') from tablename
				eg - select replace('tyagu','y','i') from tablename;
			5. substr()
				Syntax - select substr(string,position,length) from tablename;
				eg - select substr(ename,1,2) from employee;
						(OR)
					select substr(ename,4) from employee;

				Note - length is optional in substr.
			6. Position()
				-> Used to find the record is present in which index

				Syntax - select  position('search string' in 'main string') from t_name;
				eg - select position('i' in ename) from employee;
					select position('Sql' in 'postgreSql') from employee;
			7. trim()
				Syntax - select trim([leading/trailing/both] <remove string> from <main string>)
				eg:
					Leading - select trim(leading 'm' from 'madam');
					Trailing - select trim(trailing 'm' from 'madam');
					Both - select trim('m' from 'madam') (OR) select trim(both 'm' from 'madam');

					Note: 'Both' is optional.
	2. NUMBER SINGLE ROW FUNCTION:
		1. mod()
			-> Used to get modules
	
			Syntax - select mod(divident,divisor);
			ex - select mod(10,3);
		2. Power()
			Syntax - select power(value,power);
			ex - select power(3,2);
		3. Round()
			-> It will round the given number to neareset whole number.
			Without Scale:
				CASE 1:

				Syntax - select round(number);
				ex - select round(6782.4); ----> 6782

			With Scale:
				CASE 2: ( Positive Scale: )

				Syntax - select round(number,[scale]);
				ex - select round(6782.437,2); ----> 6782.44

				CASE 3: ( Negative Scale: )
		
				Syntax - select round(number,[negative scale]);
				ex - select round(6722.345,-2);
			
		4. abs()
			-> It will return a positive value.

			Syntax - select abs(value)
			ex - select abs(-122)  ----- output-> 122

		5. sqrt()
			
			Syntax -> select sqrt(number);
			Example -> select sqrt(3); 
	
		6. trunce()
			-> It will eliminate the decimal value and always gives the lowest whole value
		
			Syntax -> select trunce(number)
			eg -> select trunce(56.6) -> 56

	3. DATE AND TIME SINGLE ROW FUNCTION:
		1. current_date:
			-> It will display current date

			syntax -> select current_date;
					(OR)
				select now()::date;

		2. Current_time:
			Syntax -> select current_time;
					(OR)
				select now()::time;

		3. Both date and time:
			Syntax -> select clock_timestamp();
					(OR)
				select now();

		4. Age()
			-> used to calculate age.

			Calculate Age:
			Syntax -> select age(timestamp 'current date',timestamp 'date of birth');
			eg -> select age(timestamp '2020-05-29',timestamp '1998-04-14');

			Calculate Century:
			Syntax -> select extract(century from timestamp '2020-05-29');

			Calculate Decade:
			Syntax -> select extract(decade from timestamp '2020-05-29');

			Calculate day:
			Syntax -> select extract(day from timestamp '2020-05-29');

			Calculate which day it is in a week:
			Syntrax -> select extract(dow from timestamp '2020-05-29'); { it will provide a number from (0 to 6) indicates (sunday to saturday) }
			dow -> day of the week
			
			Calculate which day it is in a week:
			Syntrax -> select extract(doy from timestamp '2020-05-29');
			doy -> day of the year

			Calculate which week it is in a year:
			Syntrax -> select extract(week from timestamp '2020-05-29');

			Calculate which month it is in a year:
			Syntrax -> select extract(month from timestamp '2020-05-29');

			Calculate hours:
			Syntax -> select extract(hours from timestamp '2020-05-29 13:13:13');

			Calculate minute:
			Syntax -> select extract(min from timestamp '2020-05-29 13:13:13');

CLAUSE:

ORDERBY:
	-> It is used to sort records in ascending or desending order.
	-> By default records will sorted in ascending order if, nothing ASC/DESC is specified.
	-> It always execute after select clause.
	-> It sholud be always the last class to be written in the query.
	-> If the groupby class is used with the orderby clause, we can use multi row function only for the column name or expression which is used by the groupby class while sorting.
	-> In order by clause, we can use alias name.

	Syntax -> select col1,col2/ * from tablename orderby colmn ASC|DESC.
	EX -> select * from employee order by sal DESC;

GROUPBY:
	-> It group rows that have the same values into summary rows.
	-> It Often used with Aggregate functions.
	-> It executes row by row.
	-> After execution of group by clause the records will be grouped, therefore all the classes execute after execution of group by clause, will execute group by group.

	Syntax -> select * from tablename where condition group by col_name;
	EX -> select count(deptno) from employee group by deptno;
	Order of Execution -> from-where-groupby-select

HAVING:
	-> It is used to filter the group on some condition.
	-> It will always execute after execution of group by clause.
	-> We cannot use having clause without group by clause.
	-> We can use only column used in the group by clause.

 
	Syntax -> select * from table_name 
		  where(row filter condition)
		  group by col_name 
		  having(group filter condition);
	Ex -> select deptno from employee where designation='clerk' group by deptno having count(*)>=2;
	Order of Execution -> from-where-groupby-having-select

SUBQUERY:

	-> A Query written inside another Query is known as SubQuery.
	-> A Query written written within the parenthesis is known as subquery or InnerQuery.
	-> Query which is written outside parenthesis is known as outer Query.
	-> It is also known as 'Inner Query'  or 'Nested Query'.
	-> It is an alternative way of returning  data from multiple tables.
	-> SubQueries must be enclosed with in parenthesis.
	
	Uses:
	1. Whenever we dont know exact values, we can use subquery to fetch those values.
	2. We can also retrieve data from multiple tables by using SubQuery.
	
	ORDER OF EXECUTION:
	1. First Inner Query will execute.
	2. The output of inner query will be treated as the input for outer Query.
	3. Then the outer Query will execute and provide result set.

	Syntax -> select * from t_name where c_name operator (select c_name from t_name);
	
	-> They are classified into
		1. Single Row Subquery
		2. Multi Row Subquery

		Single Row SubQuery:
		-> It must and should return a single record.
		-> If the single value operators such as ( =,>,< ) are used, We call it as single Row SubQuery.
		-> The inner Query shold return only one value.
			Syntax -> select * from t_name where c_name Arithmetic operator | Compatision operator (select c_name from t_name);
			EX -> select * from emp where dname=(select dname from d_info);

		Multi Row SubQuery:
		-> If the operator such as multi value operator(IN) are used, We can call it as Multi Row Subquery.
		-> It can return one or more number of rows.
			Syntax -> select * from t_name where c_name Special operator (select c_name1,c_name2,.. from t_name);
			EX -> select * from emp where dname in (select dname from d_info);

JOINS:

	-> Join is used to fetch the data from two or more tables.
	-> Minimum required condition for joining table is, at least number of tables should be two.
	-> JOIN keyword is used to join multiple tables.

	TYPES OF JOIN:
	1. Cross join
	2. Outer Join
	3. Inner join
	4. Self Join
	5. Natural Join.

	1.Cross Join(cartesion Join):
		-> A cross join will merge every rows present in one table with every rows present in another table.
		-> It is also known as the Cartesian join since it returns the Cartesian product of the sets of rows from the joined tables.
	
		Syntax -> select */c_name from table1 cross join table2;
		Ex: -> select * from employee cross join department_info;

	2.Inner Join:
		-> It returns matched(common) record from multiple tables.
		-> Retrieving common records from two tables with the use of join condition is known as inner join.

		Syntax -> select */col_name from table1 inner join table2 on join condition.
		Example -> select * from employee inner join department_info on employee.deptno=department_info.deptno;

	3. Outer Join:
			If we need unmatched records, then we can go for outer join.
		-> Left Outer Join
		-> Right Outer Join
		-> Full Outer Join

		LEFT OUTER JOIN:
		-> It gives us the inner join and the unmatched  records from the left table.
		-> Otherwise, It will give the matched and unmatched records from the left table.
		
		Syntax -> select */C-name from table1 left outer join table2 on join condition;
		Example -> select * from employee e left outer join dept_info d on e.deptno=d.deptno;

		RIGHT OUTER JOIN:
		-> It gives us the inner join and the unmatched  records from the right table.
		-> Otherwise, It will give the matched and unmatched records from the right table.

		Syntax -> select */C-name from table1 right outer join table2 on join condition;
		Example -> select * from employee e right outer join dept_info d on e.deptno=d.deptno;

		FULL OUTER JOIN:
		-> It gives the inner join and both the matched and unmatched records from both tables.
		-> It is the combination of both left and right outer join.

		Syntax -> select */C-name from table1 full outer join table2 on join condition;
		Example -> select * from employee e full outer join dept_info d on e.deptno=d.deptno;

	4. Natural Join:
		-> we dont need to pass ant condition.
		-> It will give common records present in both tables like inner join, when common record is present in both the tables.
		-> If, no common records found, it will gives cartesian join.

		Syntax -> select */c_name from table1 natural join table2;
		EX -> select ename from employee inner join dept_info;
	5. Self Join:
		-> Joining single table using alias name.
		-> Merging of same table.
		-> Only one table will be there in the self join.
		
		Syntax -> select */c_name from table_name alias_name self  join table_name alias2 on join_condition.
		

TRUNCATE:
	-> It will delete the entire data permanently, but table name will not be deleted.
	-> We cannot use where class in truncate operation.

DELETE:
	-> It will delete the entire data but, we can roll back the operation.
	-> We can use where class in delete operation.

ANY OPERATOR:

	-> It is a set comparision operator, used to compare set of values.
	-> The ANY operator returns true if any value of the subquery meets the condition, otherwise, it returns false.
	-> The ANY operator must be preceded by any of the following comparison operator =, <=, >, <, > and <>.
	-> It should be used only with where and having clause.
	-> The subquery must return exactly one column.
	-> It returns true if any of the subquery values meet a certain condition.

	Ex-> select * from employee where ename=any(select ename from employee where deptno=20);

NORMALIZATION:

	Key attributes:
		-> unique characteristics of an entity.
		-> helps us to uniquely identify a record in a table.
	Non Key Attributes:
		-> Other than key attributes all other attributes we have are known as non key attributes.
	Prime key Attributes:
		-> It uniquely identifies a record
	Non prime key attributes:
		-> Apart from prime key attribute, all other key attributes are non prime key attributes.
	Composite key Attributes:
		-> whenever we combine two or more attributes(columns) which helps us to uniquely identifies a record and it is a composite key attribute.
	Super key:
		-> A set of all key attributes.
	Foreign key:
		-> It is a key in a table which is primary key in its parent table.

Functional Dependency:
		
	-> As the name suggests the Attributes of the table dependent upon each other
	-> It helps us to prevent data redundancy(repetation of unnecessory data) and anomoly(side effect of DML operation)

	EX-
		R--->{ X,Y } {empid,name }

		X is determining Y     empid is determining name
		Y is dependent on X    name is dependent on empid

	Types of Functional Dependencies:

	1. Total Functional Dependency

		* In a relationship all the attributs are determined by a single attributes Which is a key attribute.
		EX:
			R----> { A,B,C,D }
				In this relation A determines all other Attributes.As like following,
			A ---> {B}
			A ---> {C}
			A ---> {D}
			Here we can say, A ---> B,C,D - (B,C,D dependent on Attribute A)

	2. Partial Functional Dependency

		*A relation is said to have partial functional dependency,
		* It consists of composite key attribute
		EX:
			R----> { A,B,C,D }
			{A,B} ----> {C}
				{A} ----> {C} Here C is partialy dependent on A, bcz, C is also dependent on B
			R ----> {Father,maha,thiyagu,sri}
			{father,maha} --> Thiyagu .. Here Thiyagu is dependent on both Father and maha

	3. Transitive Functional Dependency:
		
		* A relation is said to be a Transitive functional dependency, If there exist such that an attribute is determined by a non key attribute which intern determined by a key attribute.

		EX:
			A --> {B}
			B --> {C}
			
			Here, A is a key attribute determines B and B is a non key attribute that determines an ttribute C. Then ..
			
			A --> {C}. Here attribute C is inderectly determined by key Attribute A.

NORMALIZATION:	

	* The process of decomposinin a table into smaller table inorder to remove redundancy and anomolies by identifying the dependencies is known as Normalization
							(OR)
	* The process of reducing a table into its Normal Form.(A table without redundancy and anomoly)
	
	Types of Normal Form:

	1. 1NF - First Normal Form
	2. 2NF - Second Normal Form
	3. 3N F- Third Normal Form
	4. BCNF - Boyce Codd Normal Form
	5. 4NF - Fourth Normal Form

	FIRST NORMAL FORM:

	RULES-
	1. A table should not have any duplicate rows.
	2. Every cell in a table should be atomic value.

	SECOND NORMAL FORM:

	RULES-
	1. Same as first normal form.
	2. It should not have partial functional dependency.(It should not have composite key attribute)

	THIRD NORMAL FORM:

	RULES-
	1. It should follow second normal form.
	2. Table should not have Transitive functional dependency.
		
		** Table is in normal form **
		** Generally we use only 3 normal forms **

	
	 BOYCE CODD NORMAL FORM:

	RULES-
	1. It should be in Third Normal Form