EASY:

1. There is a single operator in JavaScript, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.

	function remainder(x, y) 
	{
		return x%y;
	}

2. Create a function that takes a number (step) as an argument and returns the amount of matchsticks in that step. See step 1, 2 and 3 in the image above.

	function matchHouses(step) 
	{
		if(step==0)
		{
			return 0;
		}
		else
		{
			return step*6-(step-1);
		}
	}

3. Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function. For example, if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4 = 10.
	
	function addUp(num)
	{
		return num*(num+1)/2;
	}

4. Write a function that takes the base and height of a triangle and return its area.

	function triArea(base, height) 
	{
		return (base*height)/2;
	}

5. Write a function that returns 0 if the input is 1, and returns 1 if the input is 0.

	function flip(y) 
	{
		if(y==0)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}

6. Christmas Eve is almost upon us, so naturally we need to prepare some milk and cookies for Santa! Create a function that accepts a Date object and returns true if it's Christmas Eve (December 24th) and false otherwise. Keep in mind JavaScript's Date month is 0 based, meaning December is the 11th month while January is 0.

	function timeForMilkAndCookies(date) 
	{
		return date.getMonth()===11 && date.getDate()===24;
	}

7. The "Reverser" takes a string as input and returns that string in reverse order, with the opposite case.

function reverse(txt) 
{
    var stri = txt.split("")
    var arr = stri.reverse();
    var casey = arr.map(function(x) {
        if (x == x.toUpperCase()) {
            return x.toLowerCase()
        } else {
            return x.toUpperCase();
        }
    })
    return casey.join("")
}

8. Create a function that takes an integer and returns the factorial of that integer. That is, the integer multiplied by all positive lower integers.

function factorial(int) {
	var fac=1;
	for(var i=int;i>=1;i--)
		{
			fac=fac*i;
		}
	return fac;
}

9. Create a function that takes a number as an argument and returns the highest digit in that number.

function highestDigit(number) {
	if(number == 0){ 
       return 0;
      }
  else{
    var remainder = number % 10;
    return Math.max(remainder, highestDigit((number-remainder)*1e-1));
  }
}

10. Create a function that takes a string and returns the number (count) of vowels contained within it.

function countVowels(str) {
	var count=0;
	for(var i=0;i<str.length;i++)
		{
			if(str.charAt(i)=='a' || str.charAt(i)=='e' || str.charAt(i)=='i' || str.charAt(i)=='o' || str.charAt(i)=='u')
				{
					count=count+1;
				}
		}
	return count;
}


MEDIUM:

1. Create a function which returns the number of true values there are in an array.

function countTrue(arr) 
{
	 if(arr.length==0){
		 return 0;
	 }
	var count=0;
	for(var i=0;i<arr.length;i++)
		{
			if(arr[i]==true)
				{
					count=count+1;
				}
		}
	return count;
}

2. Write a function redundant that takes in a string str and returns a function that returns str.

function redundant(str) 
{
	return function(){ return str; };
}

3. A factor chain is an array where each previous element is a factor of the next consecutive element. The following is a factor chain:

function factorChain(arr)
{
	var count=0;
	for(var i=0;i<arr.length-1;i++)
		{
			if((arr[i+1]%arr[i])!==0)
				{
					count=count+1;
				}
		}
	if(count==0)
		{
			return true;
		}
	else
		{
			return false;
		}
}

4. Write a function that converts an object into an array, where each element represents a key-value pair.

function toArray(obj) {
	var arr=Object.entries(obj);
	return arr;
}

5. This Triangular Number Sequence is generated from a pattern of dots that form a triangle. The first 5 numbers of the sequence, or dots, are:

function triangle(n) {
	var num=0;
	for(var i=n;i<=1;i--)
		{
			num=num+i;
		}
	return num;
}

6. Create a function that squares every digit of a number.

function squareDigits(n) {
    let arr = n.toString().split('');
    let out = '';
    let digit;
    for (digit of arr) {
        out = out + Math.pow(digit, 2);
    }
    return parseInt(out);
}

7. Create the function that takes an array with objects and returns the sum of people's budgets.

function getBudgets(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i].budget;
    }
    return sum;
}

8. Regular expression.

const REGEXP = new RegExp("");

9. Even or Odd Number of Factors

function factorGroup(num)
{
    if (Number.isInteger(Math.sqrt(num)))
        return 'odd';
    else
        return 'even';
}

10. Integer in Range?

function intWithinBounds(n, lower, upper) 
{
    return ((n < upper) && (n >= lower) && Number.isInteger(n));
}

11. Convert Key, Values in an Object to Array

function objectToArray(obj) 
{
    return Object.entries(obj);
}

12. Return the Objects Keys and Values

function keysAndValues(obj) 
{
    let arr = [];
    arr.push(Object.keys(obj));
    arr.push(Object.values(obj));
    return arr;
}

13. Factor Chain

function factorChain(arr) 
{
    let res = true;
    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i + 1] % arr[i] === 0)
            continue
        else {
            res = false;
            break;
        }
    }
    return res;
}

14. Basic Calculator

function calculator(num1, operator, num2) 
{
    switch (operator) {
        case '+':
            return num1 + num2;
        case '-':
            return num1 - num2;
        case '*':
            return num1 * num2;
        case '/':
            if (num2 > 0)
                return num1 / num2;
            else
                return 'Can\'t divide by 0!';
            break;
    }
}

15. SquareOfEveryDigit

function squareDigits(n) 
{
    let arr = n.toString().split('');
    let out = '';
    let digit;
    for (digit of arr) {
        out = out + Math.pow(digit, 2);
    }
    return parseInt(out);
}

16. Concatenate Variable Number of Input Arrays

function concat(...args) 
{
    let arr = [...args];
    return arr.flat();
    // can also use return [].concat(...args);
}

17. Fix the Error.

function checkEquals(arr1, arr2) 
{
    //arr1===arr2 before
    if (arr1.toString() === arr2.toString()) 
	{
        return true
    	} 
	else 
	{
        return false
	}
}

18. Clone a List

function clone(arr) 
{
    arr.push(arr.slice(0));
    return arr;
}

19. Doubled the Pay

function doubledPay(n) 
{
    let pay = 0;
    for (let i = 0; i < n; i++) {
        pay += (2 ** i);
    }
    return pay;
}

20. Anonymous Functions:Adding Suffix

function add_suffix(suffix) 
{
    if (suffix === 'ly') {
        return function (str) {
            return str + 'ly';
        };
    } else if (suffix === 'less') {
        return function (str) {
            return str + 'less';
        };
    } else if (suffix === 'ing') {
        return function (str) {
            return str + 'ing';
        };
    }
}