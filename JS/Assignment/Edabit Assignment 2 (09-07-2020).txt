
EASY:

1. Create a function that calculates the number of different squares in an n * n square grid. Check the Resources tab.

function numberSquares(n) {
	return n*(n+1)*(2*n+1)/6;
}

2. Create a function that returns a base 2 (binary) representation of a base 10 (decimal) string number. To convert is simple: ((2) means base 2 and (10) means base 10) 010101001(2) = 1 + 8 + 32 + 128.

function binary(decimal) {
	return decimal.toString(2);
}

3. Your function will be passed two functions, f and g, that don't take any parameters. Your function has to call them, and return a string which indicates which function returned the larger number.

function whichIsLarger(f, g) {
	if(f()>g())
		{
			return 'f';
		}
	else if(g()>f())
		{
			return 'g';
		}
	else
		{
			return 'neither';
		}
}

4. Create a function that returns true if the first array can be nested inside the second.

arr1 can be nested inside arr2 if:

	return Math.min(...arr1)>Math.min(...arr2)?true:false;

5. Create a function that takes a number as an argument and returns the highest digit in that number.

	return Math.max(...number.toString().split(''));

6. A decimal number can be represented as a sequence of bits. To illustrate:

function bitwiseAND(n1, n2) {
	return n1&n2;
}

function bitwiseOR(n1, n2) {
	return n1|n2;
}

function bitwiseXOR(n1, n2) {
	return n1^n2;
}

7. Write a function that takes a two-digit number and determines if it's the largest of two possible digit swaps.

var rev=num.toString().split('').reverse().join('');
	return num>rev || num==rev?true:false;

8. Groups and ranges indicate groups and ranges of expression characters. The regular expression x|y matches either "x" or "y".

	const REGEXP = /(red|blue) flag/g;

9. Create a function that takes two strings as arguments and returns the number of times the first string (the single character) is found in the second string.

function charCount(myChar, str) 
{
	var arr=str.split('');
var count=0;
for(var res of arr)
{
    if(res==myChar)
		{
			count++;
		}
}
	return count;
}

10. Create a function that takes an array of non-negative integers and strings and return a new array without the strings.

function filterArray(arr) {
  return arr.filter(n => typeof n === 'number');
}

MEDIUM:

1. Convert Key, Values in an Object to Array

function objectToArray(obj) 
{
    return Object.entries(obj);
}

2. Return the Objects Keys and Values

function keysAndValues(obj) 
{
    let arr = [];
    arr.push(Object.keys(obj));
    arr.push(Object.values(obj));
    return arr;
}

3. Factor Chain

function factorChain(arr) 
{
    let res = true;
    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i + 1] % arr[i] === 0)
            continue
        else {
            res = false;
            break;
        }
    }
    return res;
}

4. Basic Calculator

function calculator(num1, operator, num2) 
{
    switch (operator) {
        case '+':
            return num1 + num2;
        case '-':
            return num1 - num2;
        case '*':
            return num1 * num2;
        case '/':
            if (num2 > 0)
                return num1 / num2;
            else
                return 'Can\'t divide by 0!';
            break;
    }
}

5. SquareOfEveryDigit

function squareDigits(n) 
{
    let arr = n.toString().split('');
    let out = '';
    let digit;
    for (digit of arr) {
        out = out + Math.pow(digit, 2);
    }
    return parseInt(out);
}

6. Concatenate Variable Number of Input Arrays

function concat(...args) 
{
    let arr = [...args];
    return arr.flat();
    // can also use return [].concat(...args);
}

7. Fix the Error.

function checkEquals(arr1, arr2) 
{
    //arr1===arr2 before
    if (arr1.toString() === arr2.toString()) 
	{
        return true
    	} 
	else 
	{
        return false
	}
}

8. Clone a List

function clone(arr) 
{
    arr.push(arr.slice(0));
    return arr;
}

9. Doubled the Pay

function doubledPay(n) 
{
    let pay = 0;
    for (let i = 0; i < n; i++) {
        pay += (2 ** i);
    }
    return pay;
}

10. Anonymous Functions:Adding Suffix

function add_suffix(suffix) 
{
    if (suffix === 'ly') {
        return function (str) {
            return str + 'ly';
        };
    } else if (suffix === 'less') {
        return function (str) {
            return str + 'less';
        };
    } else if (suffix === 'ing') {
        return function (str) {
            return str + 'ing';
        };
    }
}