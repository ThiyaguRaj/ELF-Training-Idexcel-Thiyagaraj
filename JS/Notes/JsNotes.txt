JAVASCRIPT:
	JavaScript is a programming language that adds interactivity to your website.
	This happens in games, in the behavior of responses when buttons are pressed 
	or with data entry on forms; with dynamic styling; with animation, etc.	

PRIMITIVE DATATYPES:

	1. NUMBER
	2. STRING
	3. BOOLEAN
	4. NULL
	5. UNDEFINED


REFERENCE DATA TYPE:


	1. ARRAYS:

		var arr1=[1,2,3]
	
		Note:
		1. It is a collection of data.
		2. Array in javascript can be homogeneous or heterogeneous .
		3. We can have object inside an array.
		4. Array_name.length is used to get the length of an array.

		Empty value in Array:
		1. We can Acheive it by skipping the values to that particular index of an array.

		EX:
			TYPE-1:

			var arr=[];
			arr[0]=1;
			arr[2]=2;
			arr[4]=3;
			SKIPPED 1st and 4th index

			TYPE - 2:

			var arr=[1,,2,,3,4,5];

		INBUILD METHODS:
		PROPERTIES:
			Array.length -> It will return the length of an array.
		1. Array.isArray(array_name) -> boolean
		2. Array.include(search_element, index value at which the element is to be searched) -> boolean
			-> It is used to find ,if a particular value is present in an array or not
		3. Array.indexOf(search_element,from index)
		4. push(item) -> used to insert the value in the last index. - > It will return the number of elements of an array.
		5. pop() -> It will removes the last element of an array. - > It will return the number of elements of an array.
		6. unshift() -> Insert the values at the first index. - > It will return the number of elements of an array.
		7. shif() -> Removes the element in the first index. -> It will return the number of elements of an array.
		8. join(seperator in string format) -> It will join all the elements with the seperator that we pass.
		9. splice(startIndex,delete_count,replace_items) -> It will remove the elements from the specified index upto count and it will print replace_items instead of replaced elements.
				-> delete_count and replace_items are optional.
				-> Original array will be affected.
		10. slice(start_index,end_index) -> create subset of the array.
			startindex-> from which index subset is to created
			endindex-> upto which index subset id to created.
			NOTE:
			1. It will not affect original Array.
			2. EndIndex will be excluded in the subset.(i.e) slice(1,6)-> 1,2,3,4,5 -> element in 6th index will be excluded.
		11. forEach((callback(value,index)))
			syntax:
				ArrayName.forEach(function(arrayElement,index){
							console.log(arrayElement+"present in index " +index);
							      })
			NOTE:
			1. arrayElement -> it will returns the array element.
			2. index -> It will returns the index of the element
			USES:
			-> Inorder to iterate through the array elements we can use forEach method
			-> It calls the function once per element.
			-> It doesn't operates with empty array
			-> It doesn't operates with empty elements, but, index will be changed.
			-> It will ignores the element with extra properties without index.
		12. filter((callback(value,index){
						if(condition)
						{
							return true;
						}
						else
						{
							return false;
						}
						  })
			NOTE:
				True -> Value will inserted to the new array
				False -> Value will not be inserted to the new array.
			1. It doesn't affect the original array.
			2. It will return new array.
			3. It will also return the empty elements but, it will not modify them.
			4. It will ignores the element with extra properties without index.

		13. map(callback(value, index){
						
						})
		NOTE:
		1. It is used to modify an original array and store new values in new array and it returns new array.
		2. It will not affect original array.
		3. It will ignore empty elements.
		4. It will ignores the element with extra properties without index.


	2. OBJECT:
		1. It is an entity which have its own states and behaviours.
		2. object states are stored as key and value pairs.
		3. They should be seperated by comas.
		4. We can store functions inside Objects.

		Syntax:

		var Variable_name={
				
				key : value,
				key : value
			  }

		Example:

		var emp = {

			name : "murugan",
			age : 49
		  }

		OBJECT INSIDE AN OBJECT:

		EXAMPLE:

		var empl={
			
		name : "abc",
		id :{
			id : 30,
			age : 80
		    }
		 }

		OBJECT INSIDE AN ARRAY:

			var arr=[1,emp1]

	
	3. DATE
	4. MATH
	5. FUNCTION


STATEMENT:

	Something that yields results.

	OPERANDS:
		Operands are the values on which operators work.

		TYPES:
		1. Variables
		2. Literals
	OPERATORS:
		The operators are the symbols which have its own dedicated functionality used to perform some operation.

		TYPES OF OPERATORS:
		1. Arithmetic Operators
		2. Comparision / Relational Operators
		3. Logical Operators
		4. Ternary Operators
		5. TypeOf Operators

		Arithmetic OPerators:
			{ +,-,%,/,*,++,-- }
	
		Comparision Operators:
			{ <,>,<=,>=,!=,==,===(Strictly Eaual to),!==(Strictly not Equal to) }
		
				=== , !== : Strictly equal to compares datatype of the values and also values
				 == , !=  : It compares only values.

		Logical Operators:
			{ AND(&&), OR(||), NOT(!) }

		Ternary Operators:
			1. It uses ? and : to perform If else condition.

			 Syntax : (condition)?If Statement:Else statement;
			Example : var a = (1>2)?True:False;

		TypeOf OPerator:
			1. It will provide the type of the given variable.
			
			Syntax  : typeOf(var_name);
			Example : 
				var a=1=;
				typeOf(a); -----> number

			Note:
				1. Type of null is Object.
				2. Type of Undefined is Undefined.
				4. Type of Array is Object.
TEMPLATE LITERALS:

	1. Template Literals allow embedded Expressions.
	2. It should be enclosed within Backticks(`).

	Syntax:
		`string ${expression} string`
	Example:
		var a=true;
		Console.log(`the value gives ${a} as the result`)

FUNCTIONS:

	1. Set of code / instructions that perform dedicated task.
		input --> We may or may not provide input -->number,string, null,undefined,array,object,function --> We can provide multiple input values.
		return --> It may/may not returns value -->number,string, null,undefined,array,object,function --> We cannot return multiple values.
	2. We can store functions inside objects.

	Ways to Write Function:
	1. Named Functions.
	2. Function Expression
	3. IIFE - Immediately Invoke Function Expression
	4. ES6 Arrow Function

	1. Named Function:

		Syntax: function function_name(arguments)
			{
				return value;
			}

	2. Function Expression:

		Syntax:
			var functionName= function(args)
					   {
						return value;
					   }

	3. IIFE - Immediately Invoke Function Expression

		Syntax:
			(function(args)
			{
				//statement
			})(args)

			Note:- we should not use semi colons after defining of this function.

	4. ES6 Arrow Function:

	Syntax:

		var func_name = (args) => {
					  //Statement;
				       }

		=> - This is called as Fat Arrow.



	Function as a parameter for a Function:

	ex:
		function add()
		{
			console.log("inside func");
		}
		function outer(a,b,func)
		{
			console.log("calling func");
			func();
		}

		outer(1,2,add());

DATE:

	CURRENT DATE:

		VERSIONS:

		1. new Date()
		   
		2. new Date(year,month,day,hours,mins,seconds,milliseconds)
		   
		3. new Date(milliseconds)---->We dont use this majorly
		    
		4. new Date(date string) -> "month_name date,year time(HH:MM:SS)
			eg:- new Date("March 13,1998 12:12:12")

	INBUILD METHODS IN THE DATE OBJECT:
		1. getFullYear() 
			-> It will return year in YYYY format.
		2. getMonth() 
			-> It will return month in numbers from 0 to 11.
			-> Month starts from 0.
		3. getDay()
			-> It will return Day in numbers from 0 to 6.
			-> sunday-0 to saturday-6
		4. getDate()
			-> It will return current date.
		5. getHours()
			-> It will return current hour from 0 to 23.
		6. getMinutes()
			-> It will return current minute from 0 to 59.
		7. getSeconds()
			-> Return current second from 0 to 59.
		8. getMilliSeconds()
			-> return Milliseconds.
		9. getTime() and Date.now()
			-> returns the milliseconds since jan 1 1970.

MATH:
	-> Js provides MATH Object to perform some basic Mathematical Operations.

	1. Math.PI
		-> It will return the value of pi.
	2. Math.round(Decimal_value)
		-> It will round it offf the decimal value to nearest value.
		eg:- Math.round(12.7) -> 13
	3. Math.Pow(Base,power)
		eg:-Math.Pow(2,2) -> 4
	4. Math.sqrt(number)
		-> It will return the square root value.
	5. Math.abs(value)
		-> It will return the positive value for any value.
		eg :- abs(-12) -> 12
	6. Math.ceil(9.2)
		-> It will round a decimal value to maximum value.
		eg:- ceil(9.1) -> 10
	7. Math.floor(value)
		-> It will round a decimal value to its minimum(lower) value.
		eg:- floor(9.9) -> 9
	8. Math.min(value1,...value n)
		-> It will return min value in list of values
		eg:- min(1,2,3) -> 1
	9. Math.max(value1,...value n)
		-> It will return max value in list of values
		eg:- min(1,2,3) -> 3
	10. Math.random()
		-> It will return random value.
		-> Value Range from 0 to 1 (1 is excluded).

CONTROL STRUCTURES:

		-> It is Used to control the flow of code.

	1. If
		Syntax:
			if(condition)
			{
				//statement
			}

	2. If else
		Syntax:
			if(condition)
			{
				//If block statement
			}
			else
						{
				//else block statement
			}

	3. if else if
			Syntax:
			if(condition 1)
			{
				//If block statement
			}
			else if(condition 2)
			{
				//else If block statement
			}
			else
						{
				//else block statement
			}

	4. Switch

			Syntax:
			switch(key)
			{
			case 1 : statement 1;
			break;
			case 1 : statement 2;
			break;
			case 1 : statement 3;
			break;
			default : statement;
			break;
			}

BREAK:
	-> Break statement breaks the iteration and jumps out of the loop.

CONTINUE:
	-> Continue Statement will skips that particular iteration.

LOOPING STATEMENTS:

	-> Loops are used to execute lines of code repeatedly n number of times.
	
	1. WHILE:
		Syntax:
			while(condition)
			{
				//statement;
			}
	2. DO WHILE:
		Syntax:
			do
			{
				//statement;
			}
			while(condition)
	3. FOR:
		Syntax:
			for(Initialization ; condition ; increment/decrement)
			{
				//statement;
			}

		NOTE:
		1. We cannot use this for loop with Objects.
		2. It doesn't ignore empty value.
		3. break is supported.
		4. It ignores the extra property without index value.
	
	4. FOR OF:
		-> It mainly works with array.
		Syntax:
			for( variable declaration of Array_name)
			{
				//statement
			}
		Example:
			var arr=[1,2,3,4];
			var varName;
			for(varName of arr)
			{
				console.log(varName);    		------> It will return each and every element of an array
			}

		NOTE:
		1. We cannot use this for loop with Objects.
		2. It doesn't ignore empty value.
		3. break is supported.
		4. It ignores the extra property without index value. 

	5. FOR IN:
		Syntax:
			for(variable declaration in Object)
			{
				//statement
			}
		Example:
			ARRAY:
			var arr=[1,2,3,4];
			var varName;
			for(varName in arr)
			{
				console.log(varName);    		------> It will return index values of every element
			}

			OBJECT:
			var person={
				'name' : "abc",
				'age' : 20
				   }
			for(const key in person)
			{
				console.log(person[key]);
			}

		IN CASE;
		1. Of Array -> It will return index.
		2. Of Object -> It will return key.

		NOTE:
		1. It works with objects.
		2. This Object can be of Array or JS Object.
		3. Empty value will be ignored.
		4. Break will be supported.
		5. It also supports the extra property without index value.

	6. FOR EACH:
		Syntax:

VARIABLE HOISTING:
	-> Moving the declaration at the top.
	-> It will move only the declaration and it will never moves initialization
	-> It is used to avoid bugs.

	TYPES:
	1. Global Variable Hoisting
	2. Local Variable Hoisting

CALL STACK:
	1. It keeps the record of the functions that we called.
	2. It works similar to stack(LAST IN FIRST OUT).

STRING METHODS:

	1. toLowerCase():
		converts string value to lower case.
	2. toUpperCase():
		converts string value to Upper case.
	3. charAt(position):
		returns the character at the specified index.
	4. indexOf(searchString,position):
		return the index of first occurence of that search string.
		-> If position is specified it starts checking from that specified index.
	5. concat(string1,string2,....string n):
		It will concate multiple string values into a single string.
	6. includes(start_indexstart ,position)
		It will chack if the value is present in the string or not
		-> It will return boolean value.
	7. replace(search value, replace value)
		-> It will replace an existing character with the newly specified character.
		-> If no replace value is passed then the search value is replaced with undefined.
		eg:- replace('m') -> 'm' will be replaced with undefined.
	8. subString(start,length):
		-> It will create a sub string for the original string value.
	9. trim():
		-> It will remove all the unwanted white spaces in the start of the string.

BROWSER OBJECT MODEL( BOM ):
	Using BOM we can interact with the browser.

	Window(object):
		It will be present in all the browser.
		-> Every global variable are automatically becomes the properties of Window Object
		-> Every global methods are automatically becomes the functions of Window Object.
			
		Inbuild properties of Window object:
		1. innerHeight:
			Display height of the page(only content area)
		2. innerWidth:
			Display width of the page(only content area)

		Inbuild Methods of Window Objects:
		1. prompt():
			It is used to take the user input.
		2. alert():
			It is used to give some message or Notification.
		3. confirm():
			It returns either true or false.
			-> If you click on 'OK' then it returns true.
			-> If you click on 'CANCEL' then it returns false
		4. open():
			-> It It is used to open a new tab.
		5. close():
			-> close the current tab.
		6. console():
			-> We can call log() method using console Object
				eg:-
				console.clear() -> It will clear the console.

	History(Object):
		-> There are no properties.
		
		Methods:
		1. back():
			-> It is used to navigate from current page to previous page.
		2. forward():
			-> It is used to navigate from current page to Next page.

	URL:
		URL Pattern: 
			protocol://hostname:port/pathname
			
			Protocol -> It is the mediator between browser and server. This is not mandatory, as browser will provide internally.case INSENSITIVE.
					TYPES:
					1. HTTP -> It will not Encrypt the data. So it is not secured
					2. HTTPS -> It Encrypts the data. So, it is secured
			Hostname -> where our web pages are located. It can be IP address or Computer Name. It is mandatory. case INSENSITIVE
			Port number-> number where the server is located.It is not mandatory
			path name -> name of the path.not mandatory. case SENSITIVE.
	Location(Object):
		-> It helps us to get Hostname,port number, path name,etc.
		-> It has no methods.

		PROPERTIES OF LOCATRION OBJECT:
		1. location.href -> It will provide the complete url of a page.
		2. location.protocol -> It will provide the protocol of a page.
		3. location.hostname -> It will provide the hostname of a page.
		4. location.port -> It will provide the port number of a page.
		5. location.pathname -> It will provide the path name of a page.
		

DOCUMENT OBJECT MODEL:
		- It is an programming interface for HTML and XML, which can be modified using Scripting language(JS).
		- It doesn't affect Original HTML code.
		- Browser provides DOM.


	- Everything is Node in DOM.
	NODE -> Node can be an Object,element, etc,...

	1. Entire HTML page is converted into DOM and will be displayed in the browser.
	2. What we see in a browser is based on DOM.
	
	W3C standard:
	- It is platform & language neural interface.

	Three Types of DOM:
	1. Core DOM - for all type of document
	2. XML DOM - for XML document.
	3. HTML DOM - for HTML document.

	HTML DOM:
	- Using this HTML DOM , JavaScript gets all the power to make our web pages Dynamic.
	
		Functions:
		1. We can change the HTML elements in pages.
		2. We can change the attributes of elements in pages.
		3. We can add CSS Styles.
		4. We can remove the existing Attributs/Elements.
		5. We can add new Attributes/Elements.
		6. We can create/react events.
		
		DOM TREE:
		1. Always 'Document' should be the root element of all elements.

					Document

				       Document Type
		
					 HTML

			Head				Body
			
			Title				p	h2	script

			#Content		    #Content #Content  #Content

	EVENT:It is an Action like 
		-> Hover, click, submit,...
	EventListener: It will tell that there is an action and somebody needs to handle it.
			-> Attribute is the EventListener in JS.
			-> Attributes are onClick, onSubmit, onMouseHover.
	EventHandler: It handles the action. 
			-> Function is the EventHandler in JS.

	innerText:
		-> It will only returns the content.		
		-> Retrieves the data and set content of tag as a plain text.
	innerHTML::
		-> It returns the entire element.
		-> It retrieves the data and set content as HTML format.
	
	DOM METHODS:

	1. write() -> The content inside the write method will be displyed inside the html page.
		   -> It will be loaded, once after the entire html page is loaded and it will delete other existing html elements and it will add new content.
		NOTE:
		1. we can pass objects, variables, tags etc,...

	2. open() -> It opens the output stream to write.
	3. close() -> It will close the output stream to write.
	4. writeln() -> It is similar to java println() method.
		     -> We have to use pre tag inorder to use writeln().
	5. createElement(element):
		ex -> document.createElement('h1')
		   -> we can create an specified element by using createElement 
		   -> element -> tagName
		   -> return -> 

	CHANGE THE CONTENT:

	6. getElementById(id name):
		-> returns the only element with the specified id.
	7. gatElementByTagName(tag_name):
		-> It will collect all the tags with specified tag name and it will create HTML collection object.
		-> Return Type = HTML Object with only specified Tag Name.
		-> We can iterate through for in method.
		

	8. getElementByClassName(class_name):
		Return Type = HTML Object having all the tags with same class name as specified

	9. getElementByName(name):
		-> return Type = NodeList Object.

		ex:
			var x=document.getElementsByName('simple');
			for(var key in x)
			{
				x[key].style.color='blue';
			}
		
	CHANGE THE STYLES:

	10. querySelector(tag or id or class):
		-> We use querySelector inorder to change the styles.
		-> It will return the very first element with the specified tag/classname/id.
	11. querySelectorAll(tag or id or class):
		-> It will return all the tags with specified TagName/className.

	
	APPEND:

	12. appendChild();
		-> it will add new element to page.

	13. insertBefore(newchild, existing child location)
		-> It will add new element at the sepecified location.
		Example:
			insertBefore(x, document.body.chileNodes[location starts from 0 to end]. (OR) insertBefore(x, ul.childNaodes[5]);

		Properties:
		1. firstchild
		2. firstElementChild
		3. lastElementChild

	REMOVE:

	14. remove():
		-> Remove all the content/clears the current page.
		-> Is good to not use this remove() method.

	15. removeChild():
		-> It is used to remove the child of an Element. EX-> Remove a list child from Unordered List.

		var x=dicument.getElementById('val'); ------> getting ul element
		x.removeChild(x.lastElementChild.PreviousElementSibling);

	REMOVE PARTICULAR ELEMENT:
	1. Get that patricular element.
		var X=document.getElementById("demo");
		x.removeChild(x.lastElementChild.PreviousElementSibling);
	
	ADD CSS USING NEW CLASS NAME:

		CLASSNAME PROPERTY:
			document.getElementById("demo").className="new class name";	
		CLASSLIST PROPERTY:
			document.getElementById("demo").classList.add('new class name');
	REMOVE CSS:
		
		CLASSNAME PROPERTY:
			document.getElementById("demo").className=" ";	
		CLASSLIST PROPERTY:
			document.getElementById("demo").classList.remove('new class name');

	GETTING FORM DATA USING FORM NAME:
		var form = document.forms["form_name"];
		var use = form["name of input element/id of input element"];

		eg:
		var form = document.forms["MyForm"];
		var use = form["user"].value;

FORM VALIDATION:

	1. addEventListener():

		1. It will add some event.

		document.addEventListener(event, function, oncapture)

		Event:
			1. Events such as onClick,onmouseover,onsubmit,....
			2. It should be included in string format.
			3. Prefix word 'on' should be removed. for example for onclick event,it should be specified as 'click'.
		Function:
			1. Function name should be included without paranthesis....
			2. It is the event handler performs the event.

		eg:-
			Element.addEventListener("mouseover",overFunction);

	2. removeEventListener():
		
		document.removeEventListener(event, function);

		1. It will remove that particular event.
		
		eg:-
			Element.removeEventListener("mouseover",overFunction);
      
REGULAR EXPRESSION:

	-> It Describes the pattern to be matched(pattern of characters).
	-> Used for form validation.

	Syntax:
		/pattern/modifier.

		PATTERN --> whatever the things we need to do.

		[a-z] -> between a to z.
		[^a-z] -> not between a to z.
		[0-9] -> between 0 to 9.
		[^0-9] -> not between 0 to 9.

			How To Get Patterns:
				

		MODIFIER:
			i -> case insensitive matching --> It will stops checking at the first occurence.
			g -> It won't stops checking at the first occurence.

		METHODS:

			1.compile()
			2.exec()->  it will chwck if the pattern is present in the input or not. It if matches then it returns index of first occurence
			3.test() -> it will chwck if the pattern is present in the input or not. if it presents, it returns true else it will return false.
			4.

JSON:
	-> Java Script Object Notation
	-> It is a Data Representation Format.
	-> EVerything in JSON will we represented as STRING.
	-> It is the most commenly used API'S and configs.
	-> It is LightWeight and Easy to use.
	-> It is used to Transfer Data from Two Applications.

	eg:
		var x= {
			"name"="ram",
			"age"="23";
			}

	Supported Data Types:
		1. number
		2. String
		3. Boolean
		4. null
		5. Array
		6. Object
			-> All Other datatypes Except these above types.
			-> Example -> date,function,ect,.....are not supporteds.

	CONVERT JS OBJECT TO JSON FORMAT:

		var x= {
			"name"="ram",
			"age"="23";
			}

			Methods:
			1. JSON.stringify(JS Object) -> It will convert JS object to JSON String.
			2. JSON.parse(JSON String) -> It will convert JSON String to JS object.


		var jsonFormat = JSON.strigify(x); -> It will convert JS object to JSON String.


	CONVERT JSON TO JS OBJECT:

		var obj=JSON.parse(jsonFormat);   -> It will convert JSON String to JS object.

	CONVERT DATE TO STRING:
		
		var dob = new Date();
		var dobString = dob.toJSON();

CACHE MEMORY:
	-> It is the Temproary Memory
	-> It stores the data in Key and value pair.
	Example:
		localStorage.setItem("key in string format","value in string format/JSON form);
		var val=localStorage.getItem("key");
		console.log(val);
		
		METHODS:
		1. localStorage.setItem("key in string format","value in string format/JSON form);
			-> It is used to store the data
		2. localStorage.getItem("key");
			-> It is used to gat the data
		3.localStorage.key(index):
			It will return the key value present at the present index.
		4. localStorege.length():
			It will return number of data.
		5. localStorage.removeItem(key):
			eg - localStorage.removeItem("first");
				-> It will remove that particular Data.
		6. localStorage.clear():
			-> It will clear the entire data in local storage.

REDIRECT:(Location Object):
	
	PROPERTIES:

		location.href=" complete URL ";
	
		EXAMPLE:
			location.href= "https://www.youtube.com";
		NOTE:
		-> We can navigate to previous page.
	METHODS:
		1. location.replace("https://www.youtube.com");
		NOTE:
		-> we cannot navigate to previous page.
		
		2. location.reload():
			-> It will reload the page.

SESSION STORAGE:
	Session -> It the duration between Login and Logout.  
		-> It will bw one per a Tab.

setTimeout():
	-> It is used to set Timeout for a Method.
	-> It occurs only once.
	-> If we pass date and time object, then time will not be changed
	EX:
		setTimeout(Function_name, time in seconds);
		setTimeout(dateFunc, 2000(2 secs));


Object De-Structuring:
	-> It is an alternative way to assign the properties of an object to group of variables.

	eg:-
		const person={
			name : "dhev",
			age : 23,
			mob : 1231231231
		}
	-> To print name,age and mob...we can use De-Structuring.

	const{name,age,mob}=person;
	console.log(name);
	console.log(age);
	console.log(mob);

	const{name:firstName,age,mob:mobileNumber}=person;
	console.log(firstName);
	console.log(age);
	console.log(mobileNumber);

	function use(details)
	{
		const {name,age}=details
		console.log(name);
		console.log(name);
	}
	use(person);

Array-De-Structuring:

	Normal:
		var arr=[1,2,3,4,5,6];
		var a = arr[0];
		var b = arr[1];
		console.log(a,b); ------>1,2
	De-Structuring:(with variable)
		const[ a,b,c,d,e,f] = arr;
		console.log(a,b,c,d,e,f); ------>1,2,3,4,5,6
	De-Structuring:(with single variable)
		const[a,,b] = arr;
		console.log(a,,b); ------>1,3 
	Using Split Method:
		let [firstName, lastName]="hai hello".split(' ');
		console.log(firstName); ---> hai
		console.log(lastName); ---> hello

promise: -----> (important to handle exceptions when building an application)
	-> It is used to deal with asynchronous operations in javascript.

	Synchronous : Things happen one at a time.
	Asynchronous : Things can happen at same time.(like thread in java)

	-> It is an Object in JS and it has 3 States.
			1. pending
			2. resolve
			3. rejected - if we didnt get any response.
			4. pending
	promise Possibilities:
		-> Either it is kept or ignored.
		-> if it is kept it will go to resolved state.
		-> If it is ignored then it will go to rejected state.

		methods:
			1. then() -> Used to get response.
			2. catch() -> used to handle rejection

CLASS:

	class ClassName{

		constructor(name)
		{
			this.name = name;
		}

		getName()
		{
			return this.name;
		}
	}
	
	Object Creation For class:
		var obj = new ClassName("tyagu");
		console.log(obj.getName());

STATIC:(methods):
		static getName()
		{
			return this.name;
		}
		-> It is one for class.

INHERITANCE:
	-> use "extends" keyword.
	-> super Class Constructor should be called inside subClass constructor by using super() keyword.

	eg-

		class car{

		constructor(brand)
		{
			this.brand = brand;
		}
		}

		class otherCar extends car{
			constructor(brand,model)
			{
				super(brand);
				this.model=model;
			}
		}
		var obj = new otherCar("audi","A11");

NAVIGATOR(Object):
	-> Used to get lattitude and longitude of our location.

JSX(JavaScript XML):
	-> Combination of javaScript and XML codes.
		eg-
			var x = <person> </person>
			
BABEL:
	-> It is a Tool to convert JSX in to our corresponding language Syntax.